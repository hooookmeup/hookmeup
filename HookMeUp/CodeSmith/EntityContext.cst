<%-- 
Name: RootTemplate.cst
Author: Vladimir Golos
Description: Generates Azure table entity objects from an entity map file. 
--%>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="CommonTemplate.cs" Inherits="CommonTemplate" Debug="True" CompilerVersion="v3.5" Description="Template description here." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Data" %>



<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>

<%@ Register Name="ContextQuery" Template="ContextQuery.cst" %>



<%@ XmlProperty Name="EntityMap" Schema="TableEntity.xsd" Optional="True" Category="Context" %>
<%bulidGenerateHeader();%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;
using System.Data.Services.Client;
using SS.Framework.Common; 

namespace <%= EntityMap.Namespace%>
{
  
  public partial class <%= CurrentEntity.Name %>Context : EntityContext
    {

     

    #region Constructors
	
	/// <summary>
    /// Initializes a new instance of the <see cref="<%= CurrentEntity.Name %>Context"/> class with default configuration.
    /// </summary>
    
	public <%= CurrentEntity.Name %>Context()
          : base("<%=CurrentEntity.TableName%>", _defaultConfiguration)
      {

      }
	
	/// <summary>
    /// Initializes a new instance of the <see cref="<%= CurrentEntity.Name %>Context"/> class for different from default configuration.
    /// </summary>
    
    public <%= CurrentEntity.Name %>Context(string p_ConfigurationName)
          : base("<%=CurrentEntity.TableName%>", p_ConfigurationName)
        {
        }

    #endregion
	
	
	#region CRUD
	
			/// <summary>
		    /// Insert  for <%= CurrentEntity.Name %> object 
			/// if excepion happeneds during Table operation it must be cought in calling method.
			/// </summary>
			/// <param name="obj">instance of <%= CurrentEntity.Name %> class to be inserted </param>
	
        public void AddObject(<%= CurrentEntity.Name %> obj )
        {
<% if (CurrentEntity.RowKey.KeyProperties.Count!=1){%>
			obj.InternalEntity.UpdateRowKey();
<%}%>
            servCtx.AddObject(TableName, obj.InternalEntity);
            servCtx.SaveChangesWithRetries();
        }
		

			/// <summary>
		    /// Update  for <%= CurrentEntity.Name %> object
			/// if excepion happeneds during Table operation it must be cought in calling method.
			/// </summary>
			/// <param name="obj">instance of <%= CurrentEntity.Name %> class to be inserted </param>
			/// <param name="AddToContext">bool paremeter  tell the Context to attach object if it is not tracked by this instance of the Context </param>
			
        public void UpdateObject(<%= CurrentEntity.Name %> obj, bool AddToContext)
        {
		     if (AddToContext)
                  servCtx.AttachTo(TableName, obj.InternalEntity, "*");
           	 servCtx.UpdateObject(obj.InternalEntity);
             servCtx.SaveChangesWithRetries();
        }

			/// <summary>
		    /// Delete  for <%= CurrentEntity.Name %> object
			/// if excepion happeneds during Table operation it must be cought in calling method.
			/// </summary>
			/// <param name="obj">instance of <%= CurrentEntity.Name %> class to be inserted </param>
			/// <param name="AddToContext">bool paremeter  tell the Context to attach object if it is not tracked by this instance of the Context </param>

		public void DeleteObject(<%= CurrentEntity.Name %> obj, bool AddToContext)
        {
            if (AddToContext)
				 servCtx.AttachTo(TableName, obj.InternalEntity, "*");
            servCtx.DeleteObject(obj.InternalEntity);
            servCtx.SaveChangesWithRetries();
        }
		
	
	#endregion

	#region Standard queries
			
			/// <summary>
		    /// Load instance of  <%= CurrentEntity.Name %> object from Context.
			/// </summary>
			/// <param name="p_Partition">Partition key of the table</param>
			/// <param name="p_Row">Row key of desired object </param>
			
	
        public <%= CurrentEntity.Name %> GetById(string p_Partition, string p_Row)
        {
            <%= CurrentEntity.TableName %> rez = null;
			if (!servCtx.TryGetEntity<<%= CurrentEntity.TableName %>>(IdentityURI(p_Partition, p_Row), out rez))
			{
            	var Qtran = servCtx.CreateQuery<<%= CurrentEntity.TableName %>>(TableName).Where(c => c.PartitionKey == p_Partition && c.RowKey == p_Row);
            	  try
		                {
		                    var enumer = Qtran.GetEnumerator();
		                    if (enumer.MoveNext())
		                        rez = enumer.Current;
		                }
		                catch (Exception e)
		                {
		                    Logger.LogError(e.InnerException.Message);
                		}
                	}
			  if (rez != null)
            	return new <%= CurrentEntity.Name %>(rez);
            else
                return null;
            
        }
		
        /// <summary>
        /// Load List of all <%= CurrentEntity.Name %> objects from Context for Partition Key.
        /// </summary>
        /// <param name="p_Partition">Partition key of the table</param>
        /// <returns>List of all <%= CurrentEntity.Name %> </returns>
	
       public List<<%= CurrentEntity.Name %>> GetAllForPartition( string PartitionKey )
        {
            List<<%= CurrentEntity.Name %>> rez = new List<<%= CurrentEntity.Name %>>();
            NextRecordInfo nextRec = new NextRecordInfo() ;
            	do	
				{
                	DataServiceQuery<<%= CurrentEntity.TableName %>> Qtran = (DataServiceQuery<<%= CurrentEntity.TableName %>>)servCtx.CreateQuery<<%= CurrentEntity.TableName %>>(TableName).Where(c => c.PartitionKey == PartitionKey);
                   	nextRec = GetNextPage(ref rez, Qtran, nextRec, 0);
            	}
				while (!string.IsNullOrEmpty(nextRec.NextPartition));        
            return rez;
        }


       /// <summary>
       /// Load  next page of <%= CurrentEntity.Name %> objects from Context for the passed in query and
       /// adds this page to passed in lis.
       /// </summary>
       /// <param name="list">List results will be added to.</param>
       /// <param name="Query">DataServiceQuery object</param>
       /// <param name="nextRec"> NextRecordInfo object define begining of the page to load</param>
       /// <param name="PageSize">Size of the page.  If value is 0  or value greater than 1000 system will limit paze size to 1000 records  </param>
       /// <returns> NextRecordInfo object for the next page</returns>

		private NextRecordInfo GetNextPage(ref List<<%= CurrentEntity.Name %>> list, DataServiceQuery<<%= CurrentEntity.TableName %>> Query, NextRecordInfo nextRec, int PageSize)
        {
           NextRecordInfo Result = new NextRecordInfo();
           QueryOperationResponse qor;
           if (!string.IsNullOrEmpty(nextRec.NextPartition))
               Query = Query.AddQueryOption("NextPartitionKey", nextRec.NextPartition).AddQueryOption("NextRowKey", nextRec.NextKey);
           if (PageSize > 0)
               qor = (QueryOperationResponse)((DataServiceQuery<<%= CurrentEntity.TableName %>>)Query.Take(PageSize)).Execute();
           else
               qor = (QueryOperationResponse)(Query).Execute();
           string nextPartition = String.Empty;
           string nextRow = String.Empty;
           qor.Headers.TryGetValue("x-ms-continuation-NextPartitionKey", out nextPartition);
           qor.Headers.TryGetValue("x-ms-continuation-NextRowKey", out nextRow);
           IQueryable<<%= CurrentEntity.TableName %>> qt = (IQueryable<<%= CurrentEntity.TableName %>>)qor.AsQueryable();
           Result.NextKey = nextRow;
           Result.NextPartition = nextPartition;
		   	   var enumer = qt.GetEnumerator();
           while (enumer.MoveNext())
            list.Add( new <%= CurrentEntity.Name %>(enumer.Current));
           return Result;
		   
       }
	
	#endregion

	<%GeneratedditionalQueries();%>

    }
}

<script runat="template">

private Entity _entityElement = null;

[Browsable(false)]
public Entity CurrentEntity
{
	get {return _entityElement;}
	set {_entityElement = value;}
}


protected override void OnPreRender()
{
	//System.Diagnostics.Debugger.Break();
	// if this template is called directly, then we need to set the EntityElement property using the name of the target entity.
	if (CurrentEntity == null) 	
		CurrentEntity = FindEntityByName( EntityName);
		else
		  EntityName = CurrentEntity.Name;
	if (CurrentEntity == null) 
	      throw new ApplicationException("You must either pass in an EntityElement object from a parent template or set the name of the entity.");
	
	base.OnPreRender();
}


public Entity FindEntityByName(string entityName)
{
	Entity result = null;
	if (EntityName != null && EntityName.Length > 0)
	{
		for (int i = 0; i < EntityMap.Entities.Count; i++)
		{
			if (EntityMap.Entities[i].Name == EntityName)
			{
				result = EntityMap.Entities[i];
				break;
			}
		}
	}
	return result;
}

public void GeneratedditionalQueries()
{
	if (CurrentEntity.AdditionalQueries.Count> 0)
	{

	Response.IndentLevel = 1;
    Response.WriteLine("#region Additional queries");

	
	foreach (AdditionalQuery aq in CurrentEntity.AdditionalQueries)
	{
		ContextQuery cq = new ContextQuery();
		cq.EntityName = CurrentEntity.Name;
		cq.EntityMap = EntityMap;
		cq.QueryName  = aq.Name;
		cq.Render(this.Response);
	}
		Response.WriteLine("#endregion");

	}
}

</script>