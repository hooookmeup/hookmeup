<%-- 
Name: EntiyEmptyContext.cst.cst
Author: Vladimir Golos
Description: Generates Azure table entity objects from an entity map file. 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="CommonTemplate.cs" Inherits="CommonTemplate" Debug="False" CompilerVersion="v3.5" Description="" %>


<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Data" %>





<%@ XmlProperty Name="EntityMap" Schema="TableEntity.xsd" Optional="True" Category="Context" %>
<%bulidUpdatableGenerateHeader();%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.WindowsAzure.StorageClient;
using System.Globalization;
using System.IO;
using System.Data.Services.Client;

namespace <%=EntityMap.Namespace%>
{
    public partial class  <%= CurrentEntity.Name %>Context 
    {
    /* 
	
	//   This is an example of custom developed query
	public List<<%= CurrentEntity.Name %>> MethodName(list of method parameters )
        {
            List<<%= CurrentEntity.Name %>> rez = new List<<%= CurrentEntity.Name %>>();
            NextRecordInfo nextRec = new NextRecordInfo() ;
            	do	
				{
                	DataServiceQuery<<%= CurrentEntity.TableName %>> Qtran = (DataServiceQuery<<%= CurrentEntity.TableName %>>)servCtx.CreateQuery<<%= CurrentEntity.TableName%>>(TableName).Where(c => enter query details here );
                   	nextRec = GetNextPage(ref rez, Qtran, nextRec, 0);
            	}
				while (!string.IsNullOrEmpty(nextRec.NextPartition));        
            return rez;
        }
	
	*/
	  
     //Add your extension methods here for  <%= CurrentEntity.Name %>Context class.

		

    }    

 }

<script runat="template">


private Entity _entityElement = null;

[Browsable(false)]
public Entity CurrentEntity
{
	get {return _entityElement;}
	set {_entityElement = value;}
}



protected override void OnPreRender()
{
	//System.Diagnostics.Debugger.Break();
	// if this template is called directly, then we need to set the EntityElement property using the name of the target entity.
	if (CurrentEntity == null) 	
		CurrentEntity = FindEntityByName( EntityName);
		else
		  EntityName = CurrentEntity.Name;
	if (CurrentEntity == null) 
	      throw new ApplicationException("You must either pass in an EntityElement object from a parent template or set the name of the entity.");
	
	base.OnPreRender();
}


public Entity FindEntityByName(string entityName)
{
	Entity result = null;
	if (EntityName != null && EntityName.Length > 0)
	{
		for (int i = 0; i < EntityMap.Entities.Count; i++)
		{
			if (EntityMap.Entities[i].Name == EntityName)
			{
				result = EntityMap.Entities[i];
				break;
			}
		}
	}
	return result;
}

   
 



</script>