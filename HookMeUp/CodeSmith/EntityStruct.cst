<%-- 
Name: RootTemplate.cst
Author: Vladimir Golos
Description: Generates Azure table entity objects from an entity map file. 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="CommonTemplate.cs" Inherits="CommonTemplate" Debug="False" CompilerVersion="v3.5" Description="" %>


<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Data" %>





<%@ XmlProperty Name="EntityMap" Schema="TableEntity.xsd" Optional="True" Category="Context" %>
<%bulidGenerateHeader();%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.WindowsAzure.StorageClient;
using System.Globalization;
using System.IO;

namespace <%= EntityMap.Namespace%>
{
    public class  <%= CurrentEntity.TableName %> : TableServiceEntity
    {
        
		public  <%= CurrentEntity.TableName %>()
        {

        }
		
<% if (!SinglePropKey())
		{%>
		public  void UpdateRowKey()
        {
          RowKey =<%=KeyCombination() %>;
		}
  <%}%>
	 	
       <%   buildGettersAndSetters();%>
	
	


    }    

 }

<script runat="template">



private Entity _entityElement = null;

[Browsable(false)]
public Entity CurrentEntity
{
	get {return _entityElement;}
	set {_entityElement = value;}
}



protected override void OnPreRender()
{
	//System.Diagnostics.Debugger.Break();
	// if this template is called directly, then we need to set the EntityElement property using the name of the target entity.
	if (CurrentEntity == null) 	
		CurrentEntity = FindEntityByName( EntityName);
		else
		  EntityName = CurrentEntity.Name;
	if (CurrentEntity == null) 
	      throw new ApplicationException("You must either pass in an EntityElement object from a parent template or set the name of the entity.");
	
	base.OnPreRender();
}


public Entity FindEntityByName(string entityName)
{
	Entity result = null;
	if (EntityName != null && EntityName.Length > 0)
	{
		for (int i = 0; i < EntityMap.Entities.Count; i++)
		{
			if (EntityMap.Entities[i].Name == EntityName)
			{
				result = EntityMap.Entities[i];
				break;
			}
		}
	}
	return result;
}

   
 
public void buildGettersAndSetters()
{
	

	Response.IndentLevel = 2;
    foreach(Property property in CurrentEntity.Properties)
	{
	if (property.Name !=  CurrentEntity.PartitionKeyProperty && !SingleRowKey(property ) && !property.isTransient)
					
	{
      Response.WriteLine("/// <summary>");
      Response.WriteLine("/// Gets or sets the "+property.Name+" Property value.");
      Response.WriteLine("/// </summary>");
	  
	
	 if (property.isEnum )
	  {
		if (StringEnums )
          Response.WriteLine(String.Format("public  {0,-9}\t{1,-25} {{get; set;}}",  "string", property.Name));  	
 		else
          Response.WriteLine(String.Format("public  {0,-9}\t{1,-25} {{get; set;}}",  "int", property.Name));  	
      }
	  else
	if ( property.isStruct )	
        Response.WriteLine(String.Format("public  {0,-9}\t{1,-25} {{get; set;}}",  "string", property.Name));  	
	  else 	
        Response.WriteLine(String.Format("public  {0,-9}\t{1,-25} {{get; set;}}",  property.Type, property.Name));  	
	} 
	//  else 
	//        Response.WriteLine(String.Format("public  {0,-9}\t{1,-25} {{ get {{ return PartitionKey; }} set {{ PartitionKey = value; }} }}",  property.Type, property.Name));  	

	
	  Response.WriteLine();
	}
	Response.IndentLevel = 0;
}

private Property GetByName(string propertyName)
{
	Property rez = null;
	foreach(Property property in CurrentEntity.Properties)
	{
		if (property.Name==propertyName)
		{
			rez = property;
			break;
			}
	}
	return rez;
}

public string construstorParam()
{
	string res ="";
	Property property = GetByName(CurrentEntity.PartitionKeyProperty);
	if (property != null)
	 res= property.Type+ " " + property.Name; 
     
	foreach(  KeyProperty kp in CurrentEntity.RowKey.KeyProperties)
	{
		
	 property = GetByName(kp.Property);
	if (property != null)
	 res= res+", "+property.Type+ " " + property.Name; 
	}
	Trace.WriteLine(res);	
	return res;
		

}

public string KeyCombination()
{
	string res ="";
	bool first = true;
	foreach(  KeyProperty kp in CurrentEntity.RowKey.KeyProperties)
	{
		if (first)
		  first = false;
		else
		  res= res+ "+\""+CurrentEntity.RowKey.Separator+"\"+";
	  res= res+kp.Property+kp.Conversion; 
	Trace.WriteLine(kp.Property+"          conv"+kp.Conversion);
	}
	Trace.WriteLine(res);	
	return res;
		

}

public bool SingleRowKey(Property prop)
{ 

	return ( CurrentEntity.RowKey.KeyProperties.Count==1 && CurrentEntity.RowKey.KeyProperties[0].Property == prop.Name );
	
}


public bool SinglePropKey ()
{
	return ( CurrentEntity.RowKey.KeyProperties.Count==1 );
}


</script>